name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - '**.py'
      - 'Makefile'
      - '.github/workflows/ci.yml'
      - '.pre-commit-config.yaml'
      - 'requirements-dev.txt'
      - 'Dockerfile'
      - 'scripts/**'
  pull_request:
    branches: [main, develop]

jobs:
  # Fast validation jobs
  validate-fix-script:
    name: Validate auto-fix script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Make script executable
        run: chmod +x scripts/fix-precommit-issues.sh

      - name: Run fix-issues script
        run: ./scripts/fix-precommit-issues.sh

      - name: Check for unexpected changes
        run: |
          if ! git diff --quiet; then
            echo "⚠️ Auto-fix script found issues that should have been fixed before commit:"
            git diff
            echo ""
            echo "Run 'make fix-issues' locally to auto-fix these issues"
            exit 1
          else
            echo "✓ No auto-fixable issues found"
          fi

  actionlint:
    name: Lint GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-check
          fail_on_error: true

  docker:
    name: Lint Docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3013,DL4006
        if: hashFiles('Dockerfile') != ''

  # Python linting and testing
  lint:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black
        run: black --check --line-length 120 src/*.py tests/*.py

      - name: Run isort
        run: isort --check --profile black --line-length 120 src/*.py tests/*.py

      - name: Run flake8
        run: flake8 --max-line-length=120 --extend-ignore=E203,W503 --max-complexity=25 src/*.py tests/*.py

      - name: Run pylint
        run: pylint --max-line-length=120 src/*.py tests/*.py || true
        continue-on-error: true

      - name: Run mypy
        run: mypy --ignore-missing-imports src/*.py tests/*.py

      - name: Run bandit
        run: bandit -c pyproject.toml -r src/ tests/
        continue-on-error: true

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov

      - name: Run pytest
        run: pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
